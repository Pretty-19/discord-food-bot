{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "CFT to create an EC2 instance and launch the discord bot", 
    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small"],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "SSHLocation" : {
            "Description" : "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "DiscordBotToken": {
            "Description": "Token of bot for authentication with Discord",
            "Type": "String"
        },
        "RedditClientID": {
            "Description": "Client ID of Reddit app associated with the discord bot",
            "Type": "String"
        },
        "RedditClientSecret": {
            "Description": "Client Secret of Reddit app associated with the discord bot",
            "Type": "String"
        },
        "PhoneNumber": {
            "Description": "Phone number to receive SMS message when bot is offline",
            "Type": "String"
        }
    },
    "Mappings" : {
      "AWSInstanceType2Arch" : {
        "t1.micro"    : { "Arch" : "HVM64"  },
        "t2.nano"     : { "Arch" : "HVM64"  },
        "t2.micro"    : { "Arch" : "HVM64"  },
        "t2.small"    : { "Arch" : "HVM64"  }
      },
      "AWSInstanceType2NATArch" : {
        "t1.micro"    : { "Arch" : "NATHVM64"  },
        "t2.nano"     : { "Arch" : "NATHVM64"  },
        "t2.micro"    : { "Arch" : "NATHVM64"  },
        "t2.small"    : { "Arch" : "NATHVM64"  }
      },
      "AWSRegionArch2AMI" : {
        "us-east-1"        : {"HVM64" : "ami-0ff8a91507f77f867", "HVMG2" : "ami-0a584ac55a7631c0c"},
        "us-west-2"        : {"HVM64" : "ami-a0cfeed8", "HVMG2" : "ami-0e09505bc235aa82d"},
        "us-west-1"        : {"HVM64" : "ami-0bdb828fd58c52235", "HVMG2" : "ami-066ee5fd4a9ef77f1"}
      }
    },
  
    "Resources" : {
        "BotErrorAlert": {
            "Type" : "AWS::SNS::Topic",
            "Properties" : {
                "DisplayName" : "FoodBotError",
                "TopicName" : "food_bot_offline"
            }
        },
        "ErrorSubscription": {
            "Type" : "AWS::SNS::Subscription",
            "Properties" : {
                "Endpoint" : {"Ref": "PhoneNumber"},
                "Protocol" : "sms",
                "TopicArn" : {"Ref": "BotErrorAlert"}
            }
        },
        "EC2Instance" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "sudo yum -y update\n",
                    "sudo yum -y install python36 git\n",
                    "curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n",
                    "sudo yum -y install nodejs\n",
                    "sudo npm install -g npm\n",
                    "cd /home/ec2-user/\n",
                    "git clone https://github.com/SaxyPandaBear/food_waifu.git\n",
                    "cd food_waifu\n",
                    "sudo -H pip-3.6 install -r requirements.txt\n",
                    "cp auths.py.template auths.py\n",
                    "printf '%s\n' 'foodporn' 'food' > subreddits.txt\n",
                    "sed -i 's/ID/", {"Ref": "RedditClientID"}, "/g' auths.py\n",
                    "sed -i 's/SECRET/", {"Ref": "RedditClientSecret"}, "/g' auths.py\n",
                    "sed -i 's/DISCORD TOKEN/", {"Ref": "DiscordBotToken"}, "/g' auths.py\n",
                    "sudo npm install pm2 -g\n",
                    "sudo pm2 start food_waifu.py\n",
                    "sudo pm2 startup\n",
                    "sudo pm2 save\n"
                ]]}}
            }
        },
      "InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable SSH access via port 22",
          "SecurityGroupIngress" : [ {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "SSHLocation"}
          } ]
        }
      }
    },
  
    "Outputs" : {
      "InstanceId" : {
        "Description" : "InstanceId of the newly created EC2 instance",
        "Value" : { "Ref" : "EC2Instance" }
      },
      "AZ" : {
        "Description" : "Availability Zone of the newly created EC2 instance",
        "Value" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
      },
      "PublicDNS" : {
        "Description" : "Public DNSName of the newly created EC2 instance",
        "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
      },
      "PublicIP" : {
        "Description" : "Public IP address of the newly created EC2 instance",
        "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
      }
    }
}
